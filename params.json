{"name":"Nyny","tagline":"New York, New York - (very) small Sinatra clone.","body":"# New York, New York.\r\n(very) small Sinatra clone.\r\n\r\n![alt text](https://api.travis-ci.org/alisnic/nyny.png \"build status\")\r\n[![Coverage Status](https://coveralls.io/repos/alisnic/nyny/badge.png)](https://coveralls.io/r/alisnic/nyny)\r\n[![Code Climate](https://codeclimate.com/repos/521b7ee513d637348712864a/badges/60e3637788bbac94f1cb/gpa.png)](https://codeclimate.com/repos/521b7ee513d637348712864a/feed)\r\n\r\n    # myapp.rb\r\n\r\n    require 'nyny'\r\n    class App < NYNY::App\r\n      get '/' do\r\n        'Hello world!'\r\n      end\r\n    end\r\n\r\n    App.run!\r\n    \r\nInstall the gem:\r\n\r\n    gem install nyny\r\n    \r\nRun the file\r\n    \r\n    ruby myapp.rb\r\n    \r\nOpen the browser at [http://localhost:9292]()\r\n\r\n- [TOP](#new-york-new-york)\r\n- [Motivation](#motivation)\r\n- [Philosophy](#philosophy)\r\n- [Why use NYNY instead of Sinatra](#why-use-nyny-instead-of-sinatra)\r\n- [Usage](#usage)\r\n    - [Running](#running)\r\n    - [Defining routes](#defining-routes)\r\n    - [Request scope](#request-scope)\r\n    - [Filters](#filters)\r\n    - [Middleware](#middleware)\r\n    - [Helpers](#helpers)\r\n- [FAQ](#f-a-q)\r\n- [Contributing](#contributing)\r\n\r\n# Motivation\r\nMy efforts to write __NYNY__ started when I wanted to understand how __Sinatra__\r\nworks, and stumbled upon the [base.rb][0]. The majority of the classes that\r\nare used by sinatra are in one single file, which makes it nearly impossible\r\nfor a new person to grasp.\r\n\r\nI wanted to understand how sinatra works, but the code was pretty challenging.\r\nSo I decided I should re-implement the basic things Sinatra has.\r\nThus, __NYNY__ was born.\r\n\r\n# Philosophy\r\nNYNY should have only the bare minimum to write basic web servers comfortably,\r\neverything else should be in a extension. It is also\r\ntrivial to use NYNY to build large and complex apps, by writing multiple sub\r\napps and using Rack to mount them, or by using those sub apps in the \"main\" app\r\nas middleware.\r\n\r\n# Why use NYNY instead of Sinatra\r\n- It's very small (<300 LOC), which is just a little overhead on top of Rack.\r\n- Sinatra is a drop-in replacement for NYNY. Anytime you feel that you need more,\r\n  you can just change your app to inherit from `Sinatra::Base`, your code will\r\n  still work, and you will be able to use any of the Sinatra features.\r\n- It's __~2 times faster__ than Sinatra (see [Performance][performance] for details)\r\n- You want to dig into the source code and change to your needs (NYNY's source code is more welcoming)\r\n- Each NYNY app is a Rack middleware, so it can be used inside of Sinatra, Rails, or any other Rack-based app.\r\n\r\n# Usage\r\n\r\nA NYNY app must _always_ be in a class which inherits from `NYNY::App`.\r\n\r\n    class App < NYNY::App\r\n        get '/' do\r\n            'Hello, World'\r\n        end\r\n    end\r\n\r\n## Running\r\nThere are two ways to run a NYNY app __directly__ [[?]](#middleware):\r\n\r\n- by requiring it in a `config.ru` file, and then passing it as argument to the\r\nRack's `run` function:\r\n\r\n        #config.ru\r\n        require 'app'\r\n        run App.new\r\n\r\n- by using the `run!` method directly on the app class:\r\n\r\n        #app.rb\r\n        #...App class definition...\r\n\r\n        App.run!\r\n\r\n`run!` takes the port number as optional argument (the default port is 9292).\r\nAlso the `run!` method will include 2 default middlewares to make the\r\ndevelopment easier: Rack::CommonLogger and Rack::ShowExceptions.\r\nThis will show all requests in the log, and will provide useful details\r\nin the case a error occurs during a request.\r\n\r\n\r\n## Defining routes\r\n\r\nNYNY supports the following verbs for defining a route: delete, get, head,\r\noptions, patch, post, put and trace.\r\n\r\n    class App < NYNY::App\r\n      post '/' do\r\n        'You Posted, dude!'\r\n      end\r\n    end\r\n\r\nNYNY also suports basic URL patterns:\r\n\r\n    class App < NYNY::App\r\n      get '/greet/:first_name/:last_name' do\r\n        # The last expression in the block is _always_ considered the response body.\r\n        \"Hello #{params[:first_name]} #{params[:last_name]}!\"\r\n      end\r\n    end\r\n\r\nyou can also tell NYNY to match a regex for a path:\r\n\r\n    class App < NYNY::App\r\n      get /html/ do\r\n        'Your URL contains html!'\r\n      end\r\n    end\r\n\r\nEach block that is passed to a route definition is evaluated in the context of\r\na request scope. See below what methods are available there.\r\n\r\n## Request scope\r\nAs was said above, when you pass a block to a route definition,\r\nthat block is evaluated in the context of a [RequestScope][2].\r\nThis means that several methods/objects available inside that block:\r\n\r\n- `request` - A `Rack::Request` object which encapsulates the request \r\n  to that route. (see [Rack::Request documentation][3] for more info)\r\n- `params` - a hash which contains both POST body params and GET querystring params.\r\n- `headers` - allows you to read/add headers to the response\r\n  (ex: `headers 'Content-Type' => 'text/html'`)\r\n- `status` - allows you to set the status of the response (ex: `status 403`)\r\n- `redirect_to` - sets the response to redirect\r\n  (ex: `redirect_to 'http://google.com'`)\r\n- `cookies` - a hash which allows you to access/modify/remove cookies\r\n  (ex: `cookies[:foo] = 'bar'`)\r\n- `session` - a hash which allows you to access/modify/remove session variables\r\n  (ex: `session[:foo] = 'bar'`)\r\n\r\n## Filters\r\n\r\nUnlike Sinatra, NYNY supports only \"generic\" before and after filters.\r\nThis means that you can't declare a filter to execute depending on a URL pattern.\r\nHowever, you can obtain the same effect by calling next in a before block\r\nif the request.path matches a pattern.\r\n\r\n    class App < NYNY::App\r\n      before do\r\n        next unless /html/ =~ request.path\r\n        headers 'Content-Type' => 'text/html'\r\n      end\r\n\r\n      after do\r\n        puts response.inspect\r\n      end\r\n\r\n      get '/' do\r\n        'hello'\r\n      end\r\n    end\r\n\r\nBefore and after filters are also evaluated in a RequestScope context.\r\nA little exception are the after filters, which can access\r\nthe __response__ object ([Rack::Response][4]).\r\n\r\n## Middleware\r\n\r\nA NYNY app is a Rack middleware, which means that it can be used inside \r\nSinatra, Rails, or any other Rack-based app:\r\n\r\n    class MyApp < Sinatra::Base\r\n      use MyNYNYApp\r\n    end\r\n\r\nNYNY also supports middleware itself, and that means you can use Rack middleware\r\n(or a Sinatra app) inside a NYNY app:\r\n\r\n    class App < NYNY::App\r\n      #this will serve all the files in the \"public\" folder\r\n      use Rack::Static :url => ['public']\r\n      use SinatraApp\r\n    end\r\n\r\nI recommend looking at [the list of Rack middlewares][rack-middleware]\r\n\r\n## Helpers\r\n\r\nNYNY supports helpers as Sinatra does:\r\n\r\n    class App < NYNY::App\r\n      helpers MyHelperModule\r\n    end\r\n\r\nUsing a helper implies that the helper module is included in the [RequestScope][2],\r\nand that all the methods in that module will be available inside a route\r\ndefinition block.\r\n\r\n# F. A. Q.\r\nTBD.\r\n\r\n\r\n# Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n[0]: https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb\r\n[1]: https://github.com/sinatra/sinatra/pull/716\r\n[2]: https://github.com/alisnic/nyny/blob/master/lib/nyny/request_scope.rb\r\n[3]: http://rack.rubyforge.org/doc/classes/Rack/Request.html\r\n[4]: http://rack.rubyforge.org/doc/classes/Rack/Response.html\r\n[performance]: https://github.com/alisnic/nyny/blob/master/Performance.md\r\n[rack-middleware]: https://github.com/rack/rack/wiki/List-of-Middleware\r\n","google":"UA-43503501-1","note":"Don't delete this file! It's used internally to help with page regeneration."}